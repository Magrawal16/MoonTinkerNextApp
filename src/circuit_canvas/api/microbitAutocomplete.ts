// microbitAutocomplete.ts (only the suggestions array shown; replace your suggestions = [...] with this)
export const microbitAutocompleteProvider = {
  provideCompletionItems: (model: any, position: any) => {
    const word = model.getWordUntilPosition(position);
    const range = {
      startLineNumber: position.lineNumber,
      endLineNumber: position.lineNumber,
      startColumn: word.startColumn,
      endColumn: word.endColumn,
    };

    const suggestions = [
      // Display functions
      {
        label: "display.show",
        kind: 2,
        detail: "Display function",
        documentation: "Show an image or text on the LED display",
        insertText: "display.show(${1:image})",
        insertTextRules: 4,
        range,
        sortText: "01_display.show",
        filterText: "display.show",
      },
      {
        label: "display.scroll",
        kind: 2,
        detail: "Display function",
        documentation: "Scroll text across the LED display",
        insertText: 'display.scroll("${1:text}")',
        insertTextRules: 4,
        range,
        sortText: "02_display.scroll",
        filterText: "display.scroll",
      },
      {
        label: "display.clear",
        kind: 2,
        detail: "Display function",
        documentation: "Clear the LED display",
        insertText: "display.clear()",
        insertTextRules: 4,
        range,
        sortText: "03_display.clear",
        filterText: "display.clear",
      },
      {
        label: "display.set_pixel",
        kind: 2,
        detail: "Display function",
        documentation: "Set brightness (0–9) at coordinate (x, y)",
        insertText: "display.set_pixel(${1:x}, ${2:y}, ${3:value})",
        insertTextRules: 4,
        range,
        sortText: "04_display.set_pixel",
        filterText: "display.set_pixel",
      },
      {
        label: "display.get_pixel",
        kind: 2,
        detail: "Display function",
        documentation: "Get brightness value (0–9) at coordinate (x, y)",
        insertText: "display.get_pixel(${1:x}, ${2:y})",
        insertTextRules: 4,
        range,
        sortText: "05_display.get_pixel",
        filterText: "display.get_pixel",
      },

      // Button functions
      {
        label: "button_a.is_pressed",
        kind: 2,
        detail: "Button function",
        documentation: "Check if button A is pressed",
        insertText: "button_a.is_pressed()",
        insertTextRules: 4,
        range,
        sortText: "10_button_a.is_pressed",
        filterText: "button_a.is_pressed",
      },
      {
        label: "button_b.is_pressed",
        kind: 2,
        detail: "Button function",
        documentation: "Check if button B is pressed",
        insertText: "button_b.is_pressed()",
        insertTextRules: 4,
        range,
        sortText: "11_button_b.is_pressed",
        filterText: "button_b.is_pressed",
      },
      {
        label: "button_a.was_pressed",
        kind: 2,
        detail: "Button function",
        documentation: "Check if button A was pressed since last check",
        insertText: "button_a.was_pressed()",
        insertTextRules: 4,
        range,
        sortText: "12_button_a.was_pressed",
        filterText: "button_a.was_pressed",
      },
      {
        label: "button_b.was_pressed",
        kind: 2,
        detail: "Button function",
        documentation: "Check if button B was pressed since last check",
        insertText: "button_b.was_pressed()",
        insertTextRules: 4,
        range,
        sortText: "13_button_b.was_pressed",
        filterText: "button_b.was_pressed",
      },
      {
        label: "button_a.get_presses",
        kind: 2,
        detail: "Button function",
        documentation: "Get number of times button A was pressed",
        insertText: "button_a.get_presses()",
        insertTextRules: 4,
        range,
        sortText: "14_button_a.get_presses",
        filterText: "button_a.get_presses",
      },
      {
        label: "button_b.get_presses",
        kind: 2,
        detail: "Button function",
        documentation: "Get number of times button B was pressed",
        insertText: "button_b.get_presses()",
        insertTextRules: 4,
        range,
        sortText: "15_button_b.get_presses",
        filterText: "button_b.get_presses",
      },

      // Pin functions (pin0 shown as example)
      {
        label: "pin0.read_digital",
        kind: 2,
        documentation: "Read digital value from pin0",
        insertText: "pin0.read_digital()",
        insertTextRules: 4,
        range,
        sortText: "20_pin0.read_digital",
        filterText: "pin0.read_digital",
      },
      {
        label: "pin0.write_digital",
        kind: 2,
        documentation: "Write digital value to pin0",
        insertText: "pin0.write_digital(${1:value})",
        insertTextRules: 4,
        range,
        sortText: "21_pin0.write_digital",
        filterText: "pin0.write_digital",
      },
      {
        label: "pin0.read_analog",
        kind: 2,
        documentation: "Read analog value from pin0",
        insertText: "pin0.read_analog()",
        insertTextRules: 4,
        range,
        sortText: "22_pin0.read_analog",
        filterText: "pin0.read_analog",
      },
      {
        label: "pin0.write_analog",
        kind: 2,
        documentation: "Write analog value to pin0",
        insertText: "pin0.write_analog(${1:value})",
        insertTextRules: 4,
        range,
        sortText: "23_pin0.write_analog",
        filterText: "pin0.write_analog",
      },

      // Timing / runtime
      {
        label: "sleep",
        kind: 2,
        documentation: "Pause for a number of milliseconds",
        insertText: "sleep(${1:ms})",
        insertTextRules: 4,
        range,
        sortText: "30_sleep",
        filterText: "sleep",
      },
      {
        label: "running_time",
        kind: 2,
        documentation: "Time since the board was powered on (ms)",
        insertText: "running_time()",
        insertTextRules: 4,
        range,
        sortText: "31_running_time",
        filterText: "running_time",
      },

      // Sensors
      {
        label: "temperature",
        kind: 2,
        documentation: "Return temperature in °C",
        insertText: "temperature()",
        insertTextRules: 4,
        range,
        sortText: "40_temperature",
        filterText: "temperature",
      },

      // Built-in images (constants)
      {
        label: "Image.HEART",
        kind: 21,
        documentation: "Heart image",
        insertText: "Image.HEART",
        range,
        sortText: "50_Image.HEART",
        filterText: "Image.HEART",
      },
      {
        label: "Image.HAPPY",
        kind: 21,
        documentation: "Happy face image",
        insertText: "Image.HAPPY",
        range,
        sortText: "51_Image.HAPPY",
        filterText: "Image.HAPPY",
      },
      {
        label: "Image.SAD",
        kind: 21,
        documentation: "Sad face image",
        insertText: "Image.SAD",
        range,
        sortText: "52_Image.SAD",
        filterText: "Image.SAD",
      },
      {
        label: "Image.YES",
        kind: 21,
        documentation: "Yes image",
        insertText: "Image.YES",
        range,
        sortText: "53_Image.YES",
        filterText: "Image.YES",
      },
      {
        label: "Image.NO",
        kind: 21,
        documentation: "No image",
        insertText: "Image.NO",
        range,
        sortText: "54_Image.NO",
        filterText: "Image.NO",
      },
      {
        label: "Image.ANGRY",
        kind: 21,
        documentation: "Angry face image",
        insertText: "Image.ANGRY",
        range,
        sortText: "55_Image.ANGRY",
        filterText: "Image.ANGRY",
      },
      {
        label: "Image.CONFUSED",
        kind: 21,
        documentation: "Confused face image",
        insertText: "Image.CONFUSED",
        range,
        sortText: "56_Image.CONFUSED",
        filterText: "Image.CONFUSED",
      },
      {
        label: "Image.SURPRISED",
        kind: 21,
        documentation: "Surprised face image",
        insertText: "Image.SURPRISED",
        range,
        sortText: "57_Image.SURPRISED",
        filterText: "Image.SURPRISED",
      },
      {
        label: "Image.ASLEEP",
        kind: 21,
        documentation: "Asleep face image",
        insertText: "Image.ASLEEP",
        range,
        sortText: "58_Image.ASLEEP",
        filterText: "Image.ASLEEP",
      },
      {
        label: "Image.TRIANGLE",
        kind: 21,
        documentation: "Triangle image",
        insertText: "Image.TRIANGLE",
        range,
        sortText: "59_Image.TRIANGLE",
        filterText: "Image.TRIANGLE",
      },
      {
        label: "Image.CHESSBOARD",
        kind: 21,
        documentation: "Chessboard pattern",
        insertText: "Image.CHESSBOARD",
        range,
        sortText: "5A_Image.CHESSBOARD",
        filterText: "Image.CHESSBOARD",
      },

      // Import
      {
        label: "from microbit import *",
        kind: 7,
        documentation: "Import all micro:bit functions",
        insertText: "from microbit import *",
        insertTextRules: 4,
        range,
        sortText: "Z_from microbit import *",
        filterText: "from microbit import *",
      },
    ];

    return { suggestions };
  },
};
